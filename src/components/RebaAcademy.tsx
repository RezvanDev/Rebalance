import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTelegram } from "../context/TelegramContext";
import '../styles/ RebaAcademy.css';
import confetti from 'canvas-confetti';

const explanation = {
  title: "–ê–∫–∞–¥–µ–º–∏—è REBA",
  content: `
    Rebalancer ‚Äì —ç—Ç–æ –∏–Ω–¥–µ–∫—Å–Ω—ã–π –∂–µ—Ç–æ–Ω –≤ —Å–µ—Ç–∏ TON, –ø—Ä–∏–Ω–æ—Å—è—â–∏–π –ø—Ä–∏–±—ã–ª—å —Å –∫–æ–º–∏—Å—Å–∏–π –≤¬†–ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –ü—Ä–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É—Ö–æ–¥–∏—Ç –≤ –æ–±—â–∏–π –ø—É–ª, –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ —Ü–µ–Ω–∞ –∂–µ—Ç–æ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç.

    –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
    ‚Ä¢ –° –∂–µ—Ç–æ–Ω–æ–º REBA —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫¬†TON, USDT, LIBRA.
    ‚Ä¢ –¶–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—É—é –∏–∑ –º–æ–Ω–µ—Ç –∏–∑–º–µ–Ω—è—é—Ç—Å—è –Ω–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Å–µ—Ö DEX –±–∏—Ä–∂–∞—Ö.
    ‚Ä¢ –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —Ç–æ–∫–µ–Ω REBALANCER, –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Ç–æ–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ TON, —Å–ª–æ–≤–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É—è –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ –ª—É—á—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.
  `
};

const generalEducation = `
  –û–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
  ‚Ä¢ –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ —Ä–µ–∑–µ—Ä–≤ 2x —Ç–∏–ø–æ–≤ –º–æ–Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, TON –∏ REBA, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö.
  ‚Ä¢ –°—Ç–µ–π–∫–∏–Ω–≥ –º–æ–Ω–µ—Ç—ã ‚Äî —ç—Ç–æ –∫—É–ø–ª–µ–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–º–µ—â–∞–µ—Ç–µ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–¥ %, –ª–æ–∫–∏—Ä—É—è —Å–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
  ‚Ä¢ –§–∞—Ä–º–∏–Ω–≥ (–∏–ª–∏ –ª–∏–∫–≤–∏–¥–Ω—ã–π —Ñ–∞—Ä–º–∏–Ω–≥) ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –≤ –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –≤ –≤–∏–¥–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç.
`;

const questions = [
  {
    question: "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å REBA / TON. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç –ø–∞–¥–∞–µ—Ç?",
    options: [
      "–ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ TON –ø–∞–¥–∞–µ—Ç ‚Äì –∂–µ—Ç–æ–Ω REBA –≤—ã–∫—É–ø–∞–µ—Ç TON",
      "–ï—Å–ª–∏ –∂–µ—Ç–æ–Ω REBA –ø–∞–¥–∞–µ—Ç ‚Äì –º–æ–Ω–µ—Ç–∞ TON –≤—ã–∫—É–ø–∞–µ—Ç REBA",
      "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã"
    ],
    correctAnswer: 2
  },
  {
    question: "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–º–µ–Ω—è—Ç—å USDT –Ω–∞ REBA –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏? ",
    options: [
      "–î–∞, –º–æ–∂–Ω–æ",
      "–ù–µ—Ç, –Ω–µ–ª—å–∑—è",
      "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã"
    ],
    correctAnswer: 0
  },
  {
    question: "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–º–µ–Ω—è—Ç—å USDT –Ω–∞ REBA –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏? ",
    options: [
      "–ö—É–ø–∏—Ç—å –∂–µ—Ç–æ–Ω REBA –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Ä–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–∞",
      "–ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Å—Ç–µ–π–∫–∏–Ω–≥ REBA –ø–æ–¥ %",
      "–ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Ñ–∞—Ä–º–∏–Ω–≥ REBA/TON –ø–æ–¥¬†%",
      "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä–Ω—ã"
    ],
    correctAnswer: 3
  },
];

const RebaAcademy: React.FC = () => {
    const { tg } = useTelegram();
    const navigate = useNavigate();
    const [showExplanation, setShowExplanation] = useState(true);
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
    const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  
    useEffect(() => {
      if (tg) {
        tg.BackButton.show();
        tg.BackButton.onClick(() => navigate('/tasks'));
      }
      return () => {
        if (tg) {
          tg.BackButton.offClick();
        }
      };
    }, [tg, navigate]);
  
    const handleStartQuiz = () => {
      setShowExplanation(false);
    };
  
    const handleAnswerSelect = (index: number) => {
      setSelectedAnswer(index);
      const correct = index === questions[currentQuestion].correctAnswer;
      setIsCorrect(correct);
      
      if (correct) {
        setTimeout(() => {
          confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 }
          });
        }, 100);
      }
    };
  
    const handleNextQuestion = () => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
        setIsCorrect(null);
      } else {
        localStorage.setItem('academyCompleted', 'true');
        navigate('/tasks');
      }
    };
  
    if (showExplanation) {
      return (
        <div className="academy-container">
          <h1 className="academy-title">{explanation.title}</h1>
          <div className="explanation-content">{explanation.content}</div>
          <button className="check-knowledge-button" onClick={handleStartQuiz}>
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è
          </button>
        </div>
      );
    }
  
    return (
      <div className="academy-container">
        <div className="general-education">{generalEducation}</div>
        <div className="question-card">
          <h2 className="question">{questions[currentQuestion].question}</h2>
        </div>
        <div className="options-card">
          {questions[currentQuestion].options.map((option, index) => (
            <button
              key={index}
              className={`option 
                ${selectedAnswer === index ? 'selected' : ''}
                ${selectedAnswer === index && isCorrect !== null ? (isCorrect ? 'correct' : 'incorrect') : ''}
              `}
              onClick={() => handleAnswerSelect(index)}
            >
              {option}
              {selectedAnswer === index && isCorrect !== null && (
                <span className="answer-icon">
                  {isCorrect ? '‚úÖ' : 'üö´'}
                </span>
              )}
            </button>
          ))}
        </div>
        {isCorrect && (
          <button className="next-button" onClick={handleNextQuestion}>
            {currentQuestion < questions.length - 1 ? '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
          </button>
        )}
      </div>
    );
  };
  
  export default RebaAcademy;